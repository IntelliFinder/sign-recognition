import math
import statistics
import warnings

import numpy as np
from hmmlearn.hmm import GaussianHMM
from sklearn.model_selection import KFold
from asl_utils import combine_sequences


class ModelSelector(object):
    '''
    base class for model selection (strategy design pattern)
    '''

    def __init__(self, all_word_sequences: dict, all_word_Xlengths: dict, this_word: str,
                 n_constant=3,
                 min_n_components=2, max_n_components=10,
                 random_state=14, verbose=False):
        self.words = all_word_sequences
        self.hwords = all_word_Xlengths
        self.sequences = all_word_sequences[this_word]
        self.X, self.lengths = all_word_Xlengths[this_word]
        self.this_word = this_word
        self.n_constant = n_constant
        self.min_n_components = min_n_components
        self.max_n_components = max_n_components
        self.random_state = random_state
        self.verbose = verbose

    def select(self):
        raise NotImplementedError

    def base_model(self, num_states):
        # with warnings.catch_warnings():
        warnings.filterwarnings("ignore", category=DeprecationWarning)
        # warnings.filterwarnings("ignore", category=RuntimeWarning)
        try:
            hmm_model = GaussianHMM(n_components=num_states, covariance_type="diag", n_iter=1000,
                                    random_state=self.random_state, verbose=False).fit(self.X, self.lengths)
            if self.verbose:
                print("model created for {} with {} states".format(self.this_word, num_states))
            return hmm_model
        except:
            if self.verbose:
                print("failure on {} with {} states".format(self.this_word, num_states))
            return None


class SelectorConstant(ModelSelector):
    """ select the model with value self.n_constant

    """

    def select(self):
        """ select based on n_constant value

        :return: GaussianHMM object
        """
        best_num_components = self.n_constant
        return self.base_model(best_num_components)


class SelectorBIC(ModelSelector):
    """ select the model with the lowest Bayesian Information Criterion(BIC) score

    http://www2.imm.dtu.dk/courses/02433/doc/ch6_slides.pdf
    Bayesian information criteria: BIC = -2 * logL + p * logN
    """

    def select(self):
        """ select the best model for self.this_word based on
        BIC score for n between self.min_n_components and self.max_n_components

        :return: GaussianHMM object
        """
        warnings.filterwarnings("ignore", category=DeprecationWarning)

        #  BIC = -2 * logL + p * logN  where L is the likelihood p is amount of parameters and N is amount of data points
        best_num_components = self.min_n_components
        lowest_bic_score = float("inf")
        for num_components in range(self.min_n_components, self.max_n_components):
            seqs = self.sequences
            model = self.base_model(num_components)
            logL = model.score(self.X, self.lengths)
            bic = -2*logL + np.log(len(seqs))*(model.transmat_+model.means_+model.covars_+model.startprob_)
            if bic < lowest_bic_score:
                best_num_components = num_components
                lowest_bic_score = bic
        return self.base_model(best_num_components)


class SelectorDIC(ModelSelector):
    ''' select best model based on Discriminative Information Criterion

    Biem, Alain. "A model selection criterion for classification: Application to hmm topology optimization."
    Document Analysis and Recognition, 2003. Proceedings. Seventh International Conference on. IEEE, 2003.
    http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.58.6208&rep=rep1&type=pdf
    DIC = log(P(X(i)) - 1/(M-1)SUM(log(P(X(all but i))
    '''

    def select(self):
        warnings.filterwarnings("ignore", category=DeprecationWarning)
        
        best_num_components = self.min_n_components #minimum as default 
        highest_dic_score =  float("-inf")
        #compares a model to the competing class by making use of the competing class's dataset generated by models of the competing class
        for num_components in range(self.min_n_components, self.max_n_components):
            #plug in self.X and all other wrods' self.x into equation 
            #compute likelihood of word and likelihood of all other words(anti-likelihood)
            model = self.base_model(num_components)
            log_l = model.score(self.X, self.lengths)
            log_anti_l = self.createLogAntiLikelihood(model)#returns average likelihood
            dic = log_l - log_anti_l
            if dic > highest_dic_score:
                best_num_components = num_components
                highest_dic_score = dic
        return self.base_model(best_num_components)
    def createLogAntiLikelihood(self, model):
        all_l = []
        for word, val in self.hwords.items():
            if word != self.this_word:
                X, lengths = self.hwords[word]
                try:
                    singular_log_l = model.score(X, lengths)
                except:
                    raise
                all_l.append( singular_log_l )
        average = sum(all_l)/float(len(all_l)) 
        return average
            

class SelectorCV(ModelSelector):
    ''' select best model based on average log Likelihood of cross-validation folds
    '''

    def select(self):
        warnings.filterwarnings("ignore", category=DeprecationWarning)

        best_num_components = self.min_n_components #minimum as default 
        best_log_l = float("-inf")
        for num_components in range(self.min_n_components, self.max_n_components):
            average = self.getAverageCV(num_components)
            if average > best_log_l:
                best_log_l = average
                best_num_components = num_components
        return self.base_model(best_num_components)
    def getAverageCV(self, num_components):
        log_l_fold = []
        n_splits = min(3, len(self.sequences))
        if n_splits<3: 
            model = self.base_model(num_components).fit(self.X, self.lengths)
            return model.score( self.X, self.lengths )
        else:
            kf = KFold(n_splits) #default n=3
            for train_index, test_index in kf.split(self.sequences):
                #combine sequences from asl_recognizer
                X_train, lengths_train = combine_sequences( train_index, self.sequences) #go to asl_utils
                x_test, lengths_test   = combine_sequences( test_index, self.sequences )
                #build model
                model = GaussianHMM(n_components=num_components, covariance_type="diag", n_iter=1000, 
                                    random_state=self.random_state, verbose=False).fit(X_train, lengths_train)
                #score with test idx
                curr_log_l = model.score(X_test, lengths_test) #log likelihood based on test indices
                log_l_fold.append(curr_log_l)
        average = sum(log_l_fold)/float(len(log_l_fold))
        return average
        
